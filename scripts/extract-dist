#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:uiop :split-sequence) :silent t)

(defun download-ql-releases (ql-dist-version)
  (let ((url
          (format nil
                  "http://beta.quicklisp.org/dist/quicklisp/~A/releases.txt"
                  ql-dist-version))
        (file (merge-pathnames (format nil "tmp/releases-~A.txt" ql-dist-version)
                               ql:*quicklisp-home*)))
    (nth-value 1 (ql-http:fetch url file :quietly t))))

(defun ql-releases (ql-dist-version)
  (let ((releases.txt (download-ql-releases ql-dist-version)))
    (loop for line in (split-sequence:split-sequence #\Newline
                                                     (uiop:read-file-string releases.txt))
          when (and (not (= (length line) 0))
                    (not (char= (aref line 0) #\#)))
            collect (let ((pos (position #\Space line)))
                 (subseq line 0 pos)))))

(defun main (&optional (ql-dist-version (ql-dist:version (ql-dist:dist "quicklisp")))
             &aux (log-dir #P"logs/") (error-dir #P"errors/")
               (result-dir (uiop:ensure-directory-pathname
                            (merge-pathnames ql-dist-version #P"dists/"))))
  (format *error-output* "~&Extracting Quicklisp dist ~S to '~A'...~%" ql-dist-version result-dir)
  (mapc #'ensure-directories-exist (list result-dir log-dir error-dir))
  (let ((releases (ql-releases ql-dist-version)))
    (loop for release in releases
          for log = (merge-pathnames release log-dir)
          do (format t "~&Extracting ~S..." release)
             (handler-case
                 (uiop:run-program `("docker" "run" "-i" "quickdocs/quickdocs-extracter"
                                              "bash" "-c"
                                              ,(format nil "ros ~~/common-lisp/quickdocs-extracter/scripts/extract ~S ~S"
                                                       release ql-dist-version))
                                   :output (merge-pathnames release result-dir)
                                   :error-output log
                                   :if-output-exists :supersede
                                   :if-error-output-exists :supersede)
               (uiop:subprocess-error ()
                 (let ((error-log (merge-pathnames release error-dir)))
                   (uiop:copy-file log error-log)
                   (format t "failed.~%See '~A' for the detail." error-log))))
             (fresh-line))))
