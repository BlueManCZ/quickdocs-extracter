#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;; Use the local Legion (v0.1.1)
;(load (merge-pathnames #P"../modules/legion/legion.asd" *load-pathname*))
(ql:quickload '(:uiop :split-sequence :legion :bordeaux-threads) :silent t)

(import 'split-sequence:split-sequence)

(defvar *worker-num* 2)

(defun download-ql-releases (ql-dist-version)
  (let ((url
          (format nil
                  "http://beta.quicklisp.org/dist/quicklisp/~A/releases.txt"
                  ql-dist-version))
        (file (merge-pathnames (format nil "tmp/releases-~A.txt" ql-dist-version)
                               ql:*quicklisp-home*)))
    (nth-value 1 (ql-http:fetch url file :quietly t))))

(defun ql-releases (ql-dist-version)
  (let ((releases.txt (download-ql-releases ql-dist-version)))
    (loop for line in (split-sequence #\Newline
                                      (uiop:read-file-string releases.txt))
          when (and (not (= (length line) 0))
                    (not (char= (aref line 0) #\#)))
            collect (first (split-sequence #\Space line :count 1)))))

(defun retry-releases (ql-dist-version releases-dir errors-dir)
  (labels ((error-release-p (release)
             (uiop:file-exists-p (merge-pathnames release errors-dir)))
           (success-release-p (release)
             (and (uiop:file-exists-p (merge-pathnames release releases-dir))
                  (not (error-release-p release)))))
    (remove-if #'success-release-p (ql-releases ql-dist-version))))

(defun main (&optional (ql-dist-version (ql-dist:version (ql-dist:dist "quicklisp")))
               (if-exists #.(string :error))
             &aux
               (dists-dir (uiop:ensure-directory-pathname
                           (merge-pathnames ql-dist-version #P"dists/")))
               (releases-dir (merge-pathnames #P"releases/" dists-dir))
               (logs-dir     (merge-pathnames #P"logs/" dists-dir))
               (errors-dir   (merge-pathnames #P"errors/" dists-dir)))
  (format *error-output* "~&Extracting Quicklisp dist ~S to '~A'...~%" ql-dist-version dists-dir)
  (let (releases)
    (if (uiop:directory-exists-p dists-dir)
        (ecase (intern (string-upcase if-exists) :keyword)
          (:error (error "Directory '~A' already exists." dists-dir))
          (:delete-and-retry
           (mapc (lambda (dir)
                   (format *error-output* "~&Deleting '~A'...~%" dir)
                   (uiop:delete-directory-tree dir :validate t))
                 (list releases-dir logs-dir errors-dir))
           (setf releases (ql-releases ql-dist-version)))
          (:retry-only-errors
           (setf releases (retry-releases ql-dist-version releases-dir errors-dir))
           (format *error-output* "~&Retrying ~D releases...~%"
                   (length releases))
           (dolist (release releases)
             (dolist (dir (list releases-dir
                                errors-dir
                                logs-dir))
               (when (probe-file (merge-pathnames release dir))
                 (delete-file (merge-pathnames release dir)))))))
        (setf releases (ql-releases ql-dist-version)))
    (mapc #'ensure-directories-exist (list releases-dir logs-dir errors-dir))
    (let* ((bt:*default-special-bindings* `((*standard-output* . ,*standard-output*)
                                            (*error-output* . ,*error-output*)))
           (failed 0)
           #|(cluster (legion:make-cluster *worker-num*
                                         (lambda (worker)
                                           (multiple-value-bind (release existsp)
                                               (legion:next-job worker)
                                             (when existsp
                                               (format t "~&Extracting ~S...~%" release)
                                               (handler-case
                                                   (uiop:run-program `("docker" "run" "--rm=true" "-i" "quickdocs/quickdocs-extracter"
                                                                                "bash" "-c"
                                                                                ,(format nil "ros ~~/common-lisp/quickdocs-extracter/scripts/extract-release ~S ~S"
                                                                                         release ql-dist-version))
                                                                     :output (merge-pathnames release releases-dir)
                                                                     :error-output (merge-pathnames release logs-dir)
                                                                     :if-output-exists :supersede
                                                                     :if-error-output-exists :supersede)
                                                 (uiop:subprocess-error ()
                                                   (let ((error-log (merge-pathnames release errors-dir)))
                                                     (uiop:copy-file (merge-pathnames release logs-dir)
                                                                     error-log)
                                                     (incf failed)
                                                     (format t "~&Failed extracting ~S. See '~A' for the detail.~%"
                                                             release
                                                             error-log))))
                                               (fresh-line))))
                                         :queue-size (1+ (floor (/ (length releases) *worker-num*)))))|#)
      (dolist (release releases)
        ;(legion:add-job cluster release)
        (format t "~&Extracting ~S...~%" release)
	(ignore-errors
	  (uiop:run-program ;`("ros" "~/quicklisp/local-projects/quickdocs-extracter/scripts/extract-release"
					;,(format nil "~S" release) ,(format nil "~S" ql-dist-version))
	   `("bash" "-c"
	     ,(format nil "ros ~~/quicklisp/local-projects/quickdocs-extracter/scripts/extract-release ~S ~S"
		      release ql-dist-version))
	   :output (merge-pathnames release releases-dir)
	   :error-output (merge-pathnames release logs-dir)
	   :if-output-exists :supersede
	   :if-error-output-exists :supersede)))
      ;(legion:start-cluster cluster)
      ;(legion:join-worker-threads cluster)

      (format t "~&~D releases are successfully extracted, and ~D releases are failed.~%"
              (- (length releases) failed)
              failed))))
