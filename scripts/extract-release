#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(ql:quickload '(:uiop :split-sequence) :silent t)

(import 'split-sequence:split-sequence)

(defun download-ql-systems (ql-dist-version)
  (let ((url
          (format nil
                  "http://beta.quicklisp.org/dist/quicklisp/~A/systems.txt"
                  ql-dist-version))
        (file (merge-pathnames (format nil "tmp/systems-~A.txt" ql-dist-version)
                               ql:*quicklisp-home*)))
    (nth-value 1 (ql-http:fetch url file :quietly t))))

(defun release-systems (release-name ql-dist-version)
  (let ((systems.txt (download-ql-systems ql-dist-version)))
    (with-open-file (in systems.txt)
      (loop for line = (read-line in nil nil)
            while line
            when (and (not (= (length line) 0))
                      (not (char= (aref line 0) #\#))
                      (<= (length release-name) (length line))
                      (string= line release-name :end1 (length release-name)))
              collect (nth 2 (split-sequence #\Space line :count 3))))))

(defun main (&optional name (ql-dist-version (ql-dist:version (ql-dist:dist "quicklisp"))))
  (unless name
    (format *error-output* "~&Usage: extract-release <release name> [<ql dist version>]~%")
    (uiop:quit -1))

  (let (failed)
    (dolist (system (release-systems name ql-dist-version))
      (handler-case
          (uiop:run-program `("ros" ,(namestring (merge-pathnames #P"extract-system" *load-pathname*))
                                    ,system ,ql-dist-version)
                            :output *standard-output*
                            :error-output *error-output*)
        (uiop:subprocess-error (e)
          (setf failed t)
          (format *error-output* "~&~A~2%" e)))
      (fresh-line))
    (uiop:quit (if failed -1 0))))
