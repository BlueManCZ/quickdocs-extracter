#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q dynamic-space-size=400 -- $0 "$@"
|#

(ql:quickload '(:uiop :quickdocs-extracter) :silent t)

(use-package :quickdocs-extracter.util)

(defun main (&optional name (ql-dist-version (ql-dist:version (ql-dist:dist "quicklisp"))))
  (unless name
    (format *error-output* "~&Usage: extract-release <release name> [<ql dist version>]~%")
    (uiop:quit -1))

  (let (failed
        release-info)
    (with-ql-dist ql-dist-version
      (let ((*standard-output* *error-output*)
            (*trace-output* *error-output*)
            (sb-impl::*default-external-format* :utf-8)
            (sb-alien::*default-c-string-external-format* :utf-8))
        (setf release-info (quickdocs-extracter:serialize-release name))
        (let ((serialized-systems '()))
          (dolist (system (ql:provided-systems (ql-dist:find-release name)))
            (handler-case
                (push (read-from-string
                       (with-output-to-string (s)
                         (uiop:run-program `(#+darwin "gtimeout"
                                             #-darwin "timeout"
                                             "5m"
                                             ,(namestring (merge-pathnames #P"extract-system" *load-pathname*))
                                             ,(ql-dist:name system) ,ql-dist-version)
                                           :output s
                                           :error-output *error-output*)))
                      serialized-systems)
              (uiop:subprocess-error (e)
                (setf failed t)
                (if (= (uiop:subprocess-error-code e) 124)
                    ;; timeout
                    (format *error-output* "~&Timeout.~2%")
                    (format *error-output* "~&~A~2%" e)))))
          (setf (getf release-info :systems) serialized-systems))))
    (prin1 release-info)
    (uiop:quit (if failed -1 0))))
