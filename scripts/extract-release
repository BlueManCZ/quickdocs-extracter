#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q dynamic-space-size=400 -- $0 "$@"
|#

(ql:quickload '(:uiop :quickdocs-extracter) :silent t)

(use-package :quickdocs-extracter.util)

(defun read-last-from-string (string)
  (loop with eof = '#:eof
        with last
        with start = 0
        for (form next) = (multiple-value-list (read-from-string string nil eof :start start))
        until (eq form eof)
        do (setq last form
                 start next)
        finally (return last)))

(defun main (&optional name (ql-dist-version (ql-dist:version (ql-dist:dist "quicklisp"))))
  (unless name
    (format *error-output* "~&Usage: extract-release <release name> [<ql dist version>]~%")
    (uiop:quit -1))

  (let (failed
        release-info)
    (with-ql-dist ql-dist-version
      (let ((*standard-output* *error-output*)
            (*trace-output* *error-output*)
            (sb-impl::*default-external-format* :utf-8)
            (sb-alien::*default-c-string-external-format* :utf-8))
        (setf release-info (quickdocs-extracter:serialize-release name))
        (let ((serialized-systems '()))
          (dolist (system (ql:provided-systems (ql-dist:find-release name)))
            (let* ((out (make-string-output-stream))
                   (exit-code
                     (nth-value
                      2
                      (uiop:run-program `(#+darwin "gtimeout"
                                          #-darwin "timeout"
                                          "5m"
                                          ,(namestring (merge-pathnames #P"extract-system" *load-pathname*))
                                          ,(ql-dist:name system) ,ql-dist-version)
                                        :output out
                                        :error-output *error-output*
                                        :ignore-error-status t))))
              (cond
                (;; success
                 (= exit-code 0)
                 (let* ((out-str (get-output-stream-string out))
                        (system (read-last-from-string out-str)))
                   (if (and (consp system)
                            (zerop (mod (length system) 2)))
                       (progn
                         (when (getf system :failed)
                           (setf failed t))
                         (push system serialized-systems))
                       (progn
                         (setf failed t)
                         (push (list :type :system
                                     :name (ql-dist:name system)
                                     :failed t
                                     :error-log "Invalid output: ~S" out-str)
                               serialized-systems)))))
                (t (setf failed t)
                   (push (list :type :system
                               :name (ql-dist:name system)
                               :failed t
                               :error-log (if (= exit-code 124)
                                              "Subprocess extracting a system exceeded the time limit."
                                              (format nil
                                                      "Subprocess extracting a system failed (Code=~D)." exit-code)))
                         serialized-systems)))))
          (setf (getf release-info :systems) serialized-systems))))
    (prin1 release-info)
    (uiop:quit (if failed -1 0))))
